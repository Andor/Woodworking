# This file has been automatically generated by the loadToolsAuto.py script. Don't change it here.

import FreeCADGui

import os, sys
import fakemodule
path = os.path.dirname(fakemodule.__file__)
iconPath = os.path.join(path, "Icons")



# ######################################################################################################################
class getDimensions():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "getDimensions.xpm"),
				"Accel"   : "",
				"MenuText": "getDimensions, BOM, cutlist",
				"ToolTip" : "Creates spreadsheet with dimensions to cut."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "getDimensions"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("getDimensions", getDimensions())

	

# ######################################################################################################################
class sheet2export():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "sheet2export.xpm"),
				"Accel"   : "",
				"MenuText": "sheet2export",
				"ToolTip" : "Exports spreadsheet to chosen file format."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "sheet2export"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("sheet2export", sheet2export())

	

# ######################################################################################################################
class scanObjects():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "scanObjects.xpm"),
				"Accel"   : "",
				"MenuText": "scanObjects",
				"ToolTip" : "Inspection tool for FreeCAD macro development & project debug (live API)."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "scanObjects"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("scanObjects", scanObjects())

	

# ######################################################################################################################
class setTextures():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "setTextures.xpm"),
				"Accel"   : "",
				"MenuText": "setTextures",
				"ToolTip" : "Store textures information at object's property and allows to load textures from stored URL or local HDD path. Solves problem with texture sharing without huge project file size."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "setTextures"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("setTextures", setTextures())

	

# ######################################################################################################################
class debugInfo():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "debugInfo.xpm"),
				"Accel"   : "",
				"MenuText": "debugInfo",
				"ToolTip" : "Copy platform details to clipboard for bug report purposes."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "debugInfo"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("debugInfo", debugInfo())

	

# ######################################################################################################################
class makeTransparent():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "makeTransparent.xpm"),
				"Accel"   : "",
				"MenuText": "transparent or normal mode",
				"ToolTip" : "Make all parts transparent, so you can see all the joints, pilot holes, screws, countersinks. If you click next one all parts will back to normal. The transparent default is 83, so do not set any part to this number if you want e.g. to keep glass part of the furniture transparent after this preview."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "makeTransparent"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("makeTransparent", makeTransparent())

	

# ######################################################################################################################
class colorManager():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "colorManager.xpm"),
				"Accel"   : "",
				"MenuText": "colorManager",
				"ToolTip" : "Allows to set face colors for all objects from spreadsheet. Also you can browse colors for manually selected face, object or many faces or objects and see the effect at 3D model in real-time."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "colorManager"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("colorManager", colorManager())

	

# ######################################################################################################################
class fitModel():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "fitModel.xpm"),
				"Accel"   : "",
				"MenuText": "fitModel",
				"ToolTip" : "Fit 3D model to the screen and set base orientation (XY, 0 key)."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "fitModel"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("fitModel", fitModel())

	

# ######################################################################################################################
class magicAngle():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicAngle.xpm"),
				"Accel"   : "",
				"MenuText": "magicAngle",
				"ToolTip" : "Allows to rotate panels and even other more complicated objects, like construction profiles."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicAngle"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicAngle", magicAngle())

	

# ######################################################################################################################
class magicManager():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicManager.xpm"),
				"Accel"   : "",
				"MenuText": "magicManager",
				"ToolTip" : "If you have problem with unexpected result of Magic Panels, you can use this tool to preview panel before creation. It may take more time to create panel, but you can select exact panel to apply, also the edge and vertex position. This tool allows to create panel at selected face or between two faces."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicManager"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicManager", magicManager())

	

# ######################################################################################################################
class magicMove():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicMove.xpm"),
				"Accel"   : "",
				"MenuText": "magicMove",
				"ToolTip" : "If you have problem with unexpected result of panel movements via dedicated icons, you can use this tool to precisely move panel into desired direction. This tool allow to turn off and on axis cross and resize corner cross size."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicMove"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicMove", magicMove())

	

# ######################################################################################################################
class magicDowels():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicDowels.xpm"),
				"Accel"   : "",
				"MenuText": "magicDowels",
				"ToolTip" : "Allows to add mounting points to the furniture. For example you can easily add screws, dowels, shelf supporter pins or custom mounting points."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicDowels"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicDowels", magicDowels())

	

# ######################################################################################################################
class panelDefaultXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultXY.xpm"),
				"Accel"   : "",
				"MenuText": "panel, XY, 600x300, 18 thickness",
				"ToolTip" : "Create default panel with dimensions 600 mm x 300 mm and 18 mm thickness in the XY direction, described by the icon. Change dimensions and placement at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultXY", panelDefaultXY())

	

# ######################################################################################################################
class panelDefaultYX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultYX.xpm"),
				"Accel"   : "",
				"MenuText": "panel, YX, 300x600, 18 thickness",
				"ToolTip" : "Create default panel with dimensions 300 mm x 600 mm and 18 mm thickness in the YX direction, described by the icon. Change dimensions and placement at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultYX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultYX", panelDefaultYX())

	

# ######################################################################################################################
class panelDefaultXZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultXZ.xpm"),
				"Accel"   : "",
				"MenuText": "panel, XZ, 600x300, 18 thickness",
				"ToolTip" : "Create default panel with dimensions 600 mm x 300 mm and 18 mm thickness in the XZ direction, described by the icon. Change dimensions and placement at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultXZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultXZ", panelDefaultXZ())

	

# ######################################################################################################################
class panelDefaultZX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultZX.xpm"),
				"Accel"   : "",
				"MenuText": "panel, ZX, 300x600, 18 thickness",
				"ToolTip" : "Create default panel with dimensions 300 mm x 600 mm and 18 mm thickness in the ZX direction, described by the icon. Change dimensions and placement at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultZX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultZX", panelDefaultZX())

	

# ######################################################################################################################
class panelDefaultYZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultYZ.xpm"),
				"Accel"   : "",
				"MenuText": "panel, YZ, 600x300, 18 thickness",
				"ToolTip" : "Create default panel with dimensions 600 mm x 300 mm and 18 mm thickness in the YZ direction, described by the icon. Change dimensions and placement at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultYZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultYZ", panelDefaultYZ())

	

# ######################################################################################################################
class panelDefaultZY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultZY.xpm"),
				"Accel"   : "",
				"MenuText": "panel, ZY, 300x600, 18 thickness",
				"ToolTip" : "Create default panel with dimensions 300 mm x 600 mm and 18 mm thickness in the ZY direction, described by the icon. Change dimensions and placement at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultZY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultZY", panelDefaultZY())

	

# ######################################################################################################################
class panelCopyXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyXY.xpm"),
				"Accel"   : "",
				"MenuText": "copy panel to XY",
				"ToolTip" : "Copy selected panel to XY direction, described by the icon. If you select any supported panel in other direction, e.g. XZ, this will be some kind of copy panel with exact rotation. Change dimensions and placement at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyXY", panelCopyXY())

	

# ######################################################################################################################
class panelCopyYX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyYX.xpm"),
				"Accel"   : "",
				"MenuText": "copy panel to YX",
				"ToolTip" : "Copy selected panel to YX direction, described by the icon.  If you select any supported panel in other direction, e.g. XZ, this will be some kind of copy panel with exact rotation. Change dimensions and placement at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyYX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyYX", panelCopyYX())

	

# ######################################################################################################################
class panelCopyXZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyXZ.xpm"),
				"Accel"   : "",
				"MenuText": "copy panel to XZ",
				"ToolTip" : "Copy selected panel to XZ direction, described by the icon.  If you select any supported panel in other direction, e.g. XY, this will be some kind of copy panel with exact rotation. Change dimensions and placement at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyXZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyXZ", panelCopyXZ())

	

# ######################################################################################################################
class panelCopyZX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyZX.xpm"),
				"Accel"   : "",
				"MenuText": "copy panel to ZX",
				"ToolTip" : "Copy selected panel to ZX direction, described by the icon.  If you select any supported panel in other direction, e.g. XY, this will be some kind of copy panel with exact rotation. Change dimensions and placement at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyZX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyZX", panelCopyZX())

	

# ######################################################################################################################
class panelCopyYZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyYZ.xpm"),
				"Accel"   : "",
				"MenuText": "copy panel to YZ",
				"ToolTip" : "Copy selected panel to YZ direction, described by the icon.  If you select any supported panel in other direction, e.g. XY, this will be some kind of copy panel with exact rotation. Change dimensions and placement at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyYZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyYZ", panelCopyYZ())

	

# ######################################################################################################################
class panelCopyZY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyZY.xpm"),
				"Accel"   : "",
				"MenuText": "copy panel to ZY",
				"ToolTip" : "Copy selected panel to ZY direction, described by the icon.  If you select any supported panel in other direction, e.g. XY, this will be some kind of copy panel with exact rotation. Change dimensions and placement at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyZY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyZY", panelCopyZY())

	

# ######################################################################################################################
class panelMoveXp():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveXp.xpm"),
				"Accel"   : "",
				"MenuText": "panel, move, back",
				"ToolTip" : "Allow to move back selected panel. The move step is the selected panel thickness."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveXp"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveXp", panelMoveXp())

	

# ######################################################################################################################
class panelMoveXm():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveXm.xpm"),
				"Accel"   : "",
				"MenuText": "panel, move, forward",
				"ToolTip" : "Allow to move forward selected panel. The move step is the selected panel thickness."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveXm"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveXm", panelMoveXm())

	

# ######################################################################################################################
class panelMoveYp():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveYp.xpm"),
				"Accel"   : "",
				"MenuText": "panel, move, right",
				"ToolTip" : "Allow to move right selected panel. The move step is the selected panel thickness."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveYp"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveYp", panelMoveYp())

	

# ######################################################################################################################
class panelMoveYm():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveYm.xpm"),
				"Accel"   : "",
				"MenuText": "panel, move, left",
				"ToolTip" : "Allow to move left selected panel. The move step is the selected panel thickness."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveYm"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveYm", panelMoveYm())

	

# ######################################################################################################################
class panelMoveZp():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveZp.xpm"),
				"Accel"   : "",
				"MenuText": "panel, move, up",
				"ToolTip" : "Allow to move up selected panel. The move step is the selected panel thickness."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveZp"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveZp", panelMoveZp())

	

# ######################################################################################################################
class panelMoveZm():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveZm.xpm"),
				"Accel"   : "",
				"MenuText": "panel, move, down",
				"ToolTip" : "Allow to move down selected panel. The move step is the selected panel thickness."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveZm"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveZm", panelMoveZm())

	

# ######################################################################################################################
class panelResize1():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize1.xpm"),
				"Accel"   : "",
				"MenuText": "panel, bigger, long+",
				"ToolTip" : "Allow to make bigger the long side of the panel. The resize step is the selected panel thickness."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize1"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize1", panelResize1())

	

# ######################################################################################################################
class panelResize2():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize2.xpm"),
				"Accel"   : "",
				"MenuText": "panel, smaller, long-",
				"ToolTip" : "Allow to make smaller the long side of the panel. The resize step is the selected panel thickness."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize2"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize2", panelResize2())

	

# ######################################################################################################################
class panelResize3():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize3.xpm"),
				"Accel"   : "",
				"MenuText": "panel, bigger, short+",
				"ToolTip" : "Allow to make bigger the short side of the panel. The resize step is the selected panel thickness."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize3"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize3", panelResize3())

	

# ######################################################################################################################
class panelResize4():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize4.xpm"),
				"Accel"   : "",
				"MenuText": "panel, smaller, short-",
				"ToolTip" : "Allow to make smaller the short side of the panel. The resize step is the selected panel thickness."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize4"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize4", panelResize4())

	

# ######################################################################################################################
class panelSideLeft():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelSideLeft.xpm"),
				"Accel"   : "",
				"MenuText": "panel, side, left",
				"ToolTip" : "Creates furniture left side at selected face. Dimensions are taken from selected object. Adjust dimensions and position at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelSideLeft"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelSideLeft", panelSideLeft())

	

# ######################################################################################################################
class panelSideLeftUP():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelSideLeftUP.xpm"),
				"Accel"   : "",
				"MenuText": "panel, side, left, up",
				"ToolTip" : "Creates furniture left side at selected face but raised up. Dimensions are taken from selected object. Adjust dimensions and position at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelSideLeftUP"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelSideLeftUP", panelSideLeftUP())

	

# ######################################################################################################################
class panelSideRight():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelSideRight.xpm"),
				"Accel"   : "",
				"MenuText": "panel, side, right",
				"ToolTip" : "Creates furniture right side at selected face. Dimensions are taken from selected object. Adjust dimensions and position at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelSideRight"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelSideRight", panelSideRight())

	

# ######################################################################################################################
class panelSideRightUP():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelSideRightUP.xpm"),
				"Accel"   : "",
				"MenuText": "panel, side, right, up",
				"ToolTip" : "Creates furniture right side at selected face but raised up. Dimensions are taken from selected object. Adjust dimensions and position at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelSideRightUP"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelSideRightUP", panelSideRightUP())

	

# ######################################################################################################################
class panelBackOut():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBackOut.xpm"),
				"Accel"   : "",
				"MenuText": "panel, back, out",
				"ToolTip" : "Creates furniture back panel at 3 selected faces. Adjust dimensions and position at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBackOut"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBackOut", panelBackOut())

	

# ######################################################################################################################
class panelCoverXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCoverXY.xpm"),
				"Accel"   : "",
				"MenuText": "panel on top 3 faces to XY",
				"ToolTip" : "Copy 1st selected object and resize it with 3rd selected object thickness according to the XY direction, described by the icon. You need to select 3 faces. Dimensions are taken from 1st and 3rd selected object. So, the selection order is important to get desired result. Adjust dimensions and position at object property window, if needed."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCoverXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCoverXY", panelCoverXY())

	

# ######################################################################################################################
class rpanelPad():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "rpanelPad.xpm"),
				"Accel"   : "",
				"MenuText": "panel, replace Cube to Pad",
				"ToolTip" : "This is replace panel and it will remove the selected Cube object and replace it with exactly the same Pad object. So, you will be able to use more transformations on that Pad."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "rpanelPad"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("rpanelPad", rpanelPad())

	

# ######################################################################################################################
class panel2profile():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panel2profile.xpm"),
				"Accel"   : "",
				"MenuText": "panel to construction profile, 1 mm",
				"ToolTip" : "Replace selected Cube panels with construction profile. You can select more than one Cube panel, so you can create all detailed construction with single click."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panel2profile"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panel2profile", panel2profile())

	

# ######################################################################################################################
class panel2frame():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panel2frame.xpm"),
				"Accel"   : "",
				"MenuText": "panel to frame, 45 cut",
				"ToolTip" : "Select face to replace selected Cube panel with frame 45 cut. The 45 cut is at both sides. You can select more than one face to replace more objects at once by single click. "}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panel2frame"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panel2frame", panel2frame())

	

# ######################################################################################################################
class panelFaceXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceXY.xpm"),
				"Accel"   : "",
				"MenuText": "copy panel at face to XY",
				"ToolTip" : "Copy selected panel at selected face to XY direction, described by the icon."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceXY", panelFaceXY())

	

# ######################################################################################################################
class panelFaceYX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceYX.xpm"),
				"Accel"   : "",
				"MenuText": "copy panel at face to YX",
				"ToolTip" : "Copy selected panel at selected face to YX direction, described by the icon."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceYX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceYX", panelFaceYX())

	

# ######################################################################################################################
class panelFaceXZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceXZ.xpm"),
				"Accel"   : "",
				"MenuText": "copy panel at face to XZ",
				"ToolTip" : "Copy selected panel at selected face to XZ direction, described by the icon."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceXZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceXZ", panelFaceXZ())

	

# ######################################################################################################################
class panelFaceZX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceZX.xpm"),
				"Accel"   : "",
				"MenuText": "copy panel at face to ZX",
				"ToolTip" : "Copy selected panel at selected face to ZX direction, described by the icon."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceZX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceZX", panelFaceZX())

	

# ######################################################################################################################
class panelFaceYZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceYZ.xpm"),
				"Accel"   : "",
				"MenuText": "copy panel at face to YZ",
				"ToolTip" : "Copy selected panel at selected face to YZ direction, described by the icon."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceYZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceYZ", panelFaceYZ())

	

# ######################################################################################################################
class panelFaceZY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceZY.xpm"),
				"Accel"   : "",
				"MenuText": "copy panel at face to ZY",
				"ToolTip" : "Copy selected panel at selected face to ZY direction, described by the icon."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceZY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceZY", panelFaceZY())

	

# ######################################################################################################################
class panelBetweenXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenXY.xpm"),
				"Accel"   : "",
				"MenuText": "panel between 2 faces to XY",
				"ToolTip" : "Copy 1st selected panel between 1st and 2nd selected faces according to the XY direction, described by the icon."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenXY", panelBetweenXY())

	

# ######################################################################################################################
class panelBetweenYX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenYX.xpm"),
				"Accel"   : "",
				"MenuText": "panel between 2 faces to YX",
				"ToolTip" : "Copy 1st selected panel between 1st and 2nd selected faces according to the YX direction, described by the icon."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenYX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenYX", panelBetweenYX())

	

# ######################################################################################################################
class panelBetweenXZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenXZ.xpm"),
				"Accel"   : "",
				"MenuText": "panel between 2 faces to XZ",
				"ToolTip" : "Copy 1st selected panel between 1st and 2nd selected faces according to the XZ direction, described by the icon."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenXZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenXZ", panelBetweenXZ())

	

# ######################################################################################################################
class panelBetweenZX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenZX.xpm"),
				"Accel"   : "",
				"MenuText": "panel between 2 faces to ZX",
				"ToolTip" : "Copy 1st selected panel between 1st and 2nd selected faces according to the ZX direction, described by the icon."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenZX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenZX", panelBetweenZX())

	

# ######################################################################################################################
class panelBetweenYZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenYZ.xpm"),
				"Accel"   : "",
				"MenuText": "panel between 2 faces to YZ",
				"ToolTip" : "Copy 1st selected panel between 1st and 2nd selected faces according to the YZ direction, described by the icon."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenYZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenYZ", panelBetweenYZ())

	

# ######################################################################################################################
class panelBetweenZY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenZY.xpm"),
				"Accel"   : "",
				"MenuText": "panel between 2 faces to ZY",
				"ToolTip" : "Copy 1st selected panel between 1st and 2nd selected faces according to the ZY direction, described by the icon."}

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenZY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenZY", panelBetweenZY())

	