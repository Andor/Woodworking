# This file has been automatically generated by the loadToolsAuto.py script. Don't change it here.

import FreeCAD, FreeCADGui
translate = FreeCAD.Qt.translate

def QT_TRANSLATE_NOOP(context, text):
    return text

import os, sys
import fakemodule
path = os.path.dirname(fakemodule.__file__)
iconPath = os.path.join(path, "Icons")


# ######################################################################################################################
class debugInfo():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "debugInfo.png"),
				"MenuText": QT_TRANSLATE_NOOP("debugInfoMenuText", "debugInfo"),
				"ToolTip" : QT_TRANSLATE_NOOP("debugInfoToolTip", "Copy platform details to clipboard for bug report purposes."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "debugInfo"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("debugInfo", debugInfo())

	
# ######################################################################################################################
class getDimensions():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "getDimensions.png"),
				"MenuText": QT_TRANSLATE_NOOP("getDimensionsMenuText", "getDimensions, BOM, cutlist"),
				"ToolTip" : QT_TRANSLATE_NOOP("getDimensionsToolTip", "Creates spreadsheet with dimensions to cut."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "getDimensions"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("getDimensions", getDimensions())

	
# ######################################################################################################################
class sheet2export():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "sheet2export.png"),
				"MenuText": QT_TRANSLATE_NOOP("sheet2exportMenuText", "sheet2export"),
				"ToolTip" : QT_TRANSLATE_NOOP("sheet2exportToolTip", "Exports spreadsheet to chosen file format."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "sheet2export"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("sheet2export", sheet2export())

	
# ######################################################################################################################
class scanObjects():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "scanObjects.png"),
				"MenuText": QT_TRANSLATE_NOOP("scanObjectsMenuText", "scanObjects"),
				"ToolTip" : QT_TRANSLATE_NOOP("scanObjectsToolTip", "Inspection tool for FreeCAD macro development & project debug (live API)."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "scanObjects"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("scanObjects", scanObjects())

	
# ######################################################################################################################
class setTextures():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "setTextures.png"),
				"MenuText": QT_TRANSLATE_NOOP("setTexturesMenuText", "setTextures"),
				"ToolTip" : QT_TRANSLATE_NOOP("setTexturesToolTip", "Store textures information and allows to load textures. Solves problem with texture sharing without huge project file size."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "setTextures"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("setTextures", setTextures())

	
# ######################################################################################################################
class makeTransparent():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "makeTransparent.png"),
				"MenuText": QT_TRANSLATE_NOOP("makeTransparentMenuText", "transparent or normal mode"),
				"ToolTip" : QT_TRANSLATE_NOOP("makeTransparentToolTip", "Make all parts transparent, so you can see all the joints, pilot holes, screws, countersinks. If you click next one all parts will back to normal. The transparent default is 83, so do not set any part to this number if you want e.g. to keep glass part of the furniture transparent after this preview."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "makeTransparent"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("makeTransparent", makeTransparent())

	
# ######################################################################################################################
class colorManager():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "colorManager.png"),
				"MenuText": QT_TRANSLATE_NOOP("colorManagerMenuText", "colorManager"),
				"ToolTip" : QT_TRANSLATE_NOOP("colorManagerToolTip", "Allows to set face colors for all objects from spreadsheet. Also you can browse colors for manually selected face, object or many faces or objects and see the effect at 3D model in real-time."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "colorManager"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("colorManager", colorManager())

	
# ######################################################################################################################
class magicAngle():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicAngle.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicAngleMenuText", "magicAngle"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicAngleToolTip", "Allows to rotate panels and even other more complicated objects, like construction profiles."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicAngle"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicAngle", magicAngle())

	
# ######################################################################################################################
class showSpaceModel():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "showSpaceModel.png"),
				"MenuText": QT_TRANSLATE_NOOP("showSpaceModelMenuText", "show, model, space"),
				"ToolTip" : QT_TRANSLATE_NOOP("showSpaceModelToolTip", "This tool allows you to calculate the overall occupied space in 3D by the model."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "showSpaceModel"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("showSpaceModel", showSpaceModel())

	
# ######################################################################################################################
class showSpaceSelected():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "showSpaceSelected.png"),
				"MenuText": QT_TRANSLATE_NOOP("showSpaceSelectedMenuText", "show, selected, space"),
				"ToolTip" : QT_TRANSLATE_NOOP("showSpaceSelectedToolTip", "This tool allows you to calculate the overall occupied space in 3D by the selected parts."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "showSpaceSelected"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("showSpaceSelected", showSpaceSelected())

	
# ######################################################################################################################
class magicMove():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicMove.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicMoveMenuText", "magicMove"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicMoveToolTip", "If you have problem with unexpected result of panel movements via dedicated icons, you can use this tool to precisely move panel into desired direction. This tool allow to turn off and on axis cross and resize corner cross size."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicMove"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicMove", magicMove())

	
# ######################################################################################################################
class magicManager():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicManager.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicManagerMenuText", "magicManager"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicManagerToolTip", "If you have problem with unexpected result of Magic Panels, you can use this tool to preview panel before creation. It may take more time to create panel, but you can select exact panel to apply, also the edge and vertex position. This tool allows to create panel at selected face or between two faces."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicManager"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicManager", magicManager())

	
# ######################################################################################################################
class magicDowels():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicDowels.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicDowelsMenuText", "magicDowels"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicDowelsToolTip", "Allows to add mounting points to the furniture. For example you can easily add screws, dowels, shelf supporter pins or custom mounting points."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicDowels"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicDowels", magicDowels())

	
# ######################################################################################################################
class magicFixture():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicFixture.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicFixtureMenuText", "magicFixture"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicFixtureToolTip", "Allows to add fixture reference points to the furniture. Later you will be able to replace the cube fixture reference points with realistic fixture elements."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicFixture"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicFixture", magicFixture())

	
# ######################################################################################################################
class magicCNC():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "magicCNC.png"),
				"MenuText": QT_TRANSLATE_NOOP("magicCNCMenuText", "magicCNC, drill bit move machine"),
				"ToolTip" : QT_TRANSLATE_NOOP("magicCNCToolTip", "This tool allows to move drill bit at the selected face and drill holes."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "magicCNC"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("magicCNC", magicCNC())

	
# ######################################################################################################################
class drillHoles():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "drillHoles.png"),
				"MenuText": QT_TRANSLATE_NOOP("drillHolesMenuText", "drill bit, simple hole"),
				"ToolTip" : QT_TRANSLATE_NOOP("drillHolesToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "drillHoles"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("drillHoles", drillHoles())

	
# ######################################################################################################################
class drillCountersinks():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "drillCountersinks.png"),
				"MenuText": QT_TRANSLATE_NOOP("drillCountersinksMenuText", "drill bit, countersink"),
				"ToolTip" : QT_TRANSLATE_NOOP("drillCountersinksToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "drillCountersinks"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("drillCountersinks", drillCountersinks())

	
# ######################################################################################################################
class drillCounterbores():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "drillCounterbores.png"),
				"MenuText": QT_TRANSLATE_NOOP("drillCounterboresMenuText", "drill bit, counterbore"),
				"ToolTip" : QT_TRANSLATE_NOOP("drillCounterboresToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "drillCounterbores"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("drillCounterbores", drillCounterbores())

	
# ######################################################################################################################
class sketch2dowel():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "sketch2dowel.png"),
				"MenuText": QT_TRANSLATE_NOOP("sketch2dowelMenuText", "sketch hole to dowel"),
				"ToolTip" : QT_TRANSLATE_NOOP("sketch2dowelToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "sketch2dowel"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("sketch2dowel", sketch2dowel())

	
# ######################################################################################################################
class panelDefaultXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultXY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelDefaultXYMenuText", "panel, XY, 600x300, 18 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelDefaultXYToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultXY", panelDefaultXY())

	
# ######################################################################################################################
class panelDefaultYX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultYX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelDefaultYXMenuText", "panel, YX, 300x600, 18 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelDefaultYXToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultYX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultYX", panelDefaultYX())

	
# ######################################################################################################################
class panelDefaultXZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultXZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelDefaultXZMenuText", "panel, XZ, 600x300, 18 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelDefaultXZToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultXZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultXZ", panelDefaultXZ())

	
# ######################################################################################################################
class panelDefaultZX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultZX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelDefaultZXMenuText", "panel, ZX, 300x600, 18 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelDefaultZXToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultZX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultZX", panelDefaultZX())

	
# ######################################################################################################################
class panelDefaultYZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultYZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelDefaultYZMenuText", "panel, YZ, 600x300, 18 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelDefaultYZToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultYZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultYZ", panelDefaultYZ())

	
# ######################################################################################################################
class panelDefaultZY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelDefaultZY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelDefaultZYMenuText", "panel, ZY, 300x600, 18 thickness"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelDefaultZYToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelDefaultZY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelDefaultZY", panelDefaultZY())

	
# ######################################################################################################################
class panelCopyXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyXY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCopyXYMenuText", "copy panel, XY"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCopyXYToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyXY", panelCopyXY())

	
# ######################################################################################################################
class panelCopyYX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyYX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCopyYXMenuText", "copy panel, YX"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCopyYXToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyYX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyYX", panelCopyYX())

	
# ######################################################################################################################
class panelCopyXZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyXZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCopyXZMenuText", "copy panel, XZ"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCopyXZToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyXZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyXZ", panelCopyXZ())

	
# ######################################################################################################################
class panelCopyZX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyZX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCopyZXMenuText", "copy panel, ZX"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCopyZXToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyZX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyZX", panelCopyZX())

	
# ######################################################################################################################
class panelCopyYZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyYZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCopyYZMenuText", "copy panel, YZ"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCopyYZToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyYZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyYZ", panelCopyYZ())

	
# ######################################################################################################################
class panelCopyZY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCopyZY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCopyZYMenuText", "copy panel, ZY"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCopyZYToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCopyZY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCopyZY", panelCopyZY())

	
# ######################################################################################################################
class panelMoveXp():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveXp.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMoveXpMenuText", "panel, move, back"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMoveXpToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveXp"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveXp", panelMoveXp())

	
# ######################################################################################################################
class panelMoveXm():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveXm.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMoveXmMenuText", "panel, move, forward"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMoveXmToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveXm"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveXm", panelMoveXm())

	
# ######################################################################################################################
class panelMoveYp():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveYp.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMoveYpMenuText", "panel, move, right"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMoveYpToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveYp"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveYp", panelMoveYp())

	
# ######################################################################################################################
class panelMoveYm():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveYm.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMoveYmMenuText", "panel, move, left"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMoveYmToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveYm"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveYm", panelMoveYm())

	
# ######################################################################################################################
class panelMoveZp():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveZp.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMoveZpMenuText", "panel, move, up"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMoveZpToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveZp"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveZp", panelMoveZp())

	
# ######################################################################################################################
class panelMoveZm():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMoveZm.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMoveZmMenuText", "panel, move, down"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMoveZmToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMoveZm"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMoveZm", panelMoveZm())

	
# ######################################################################################################################
class panelMove2Face():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelMove2Face.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelMove2FaceMenuText", "panel, move, to face"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelMove2FaceToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelMove2Face"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelMove2Face", panelMove2Face())

	
# ######################################################################################################################
class fitModel():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "fitModel.png"),
				"MenuText": QT_TRANSLATE_NOOP("fitModelMenuText", "fitModel"),
				"ToolTip" : QT_TRANSLATE_NOOP("fitModelToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "fitModel"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("fitModel", fitModel())

	
# ######################################################################################################################
class panelResize1():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize1.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelResize1MenuText", "panel, bigger, long+"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelResize1ToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize1"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize1", panelResize1())

	
# ######################################################################################################################
class panelResize2():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize2.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelResize2MenuText", "panel, smaller, long-"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelResize2ToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize2"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize2", panelResize2())

	
# ######################################################################################################################
class panelResize3():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize3.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelResize3MenuText", "panel, bigger, short+"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelResize3ToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize3"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize3", panelResize3())

	
# ######################################################################################################################
class panelResize4():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelResize4.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelResize4MenuText", "panel, smaller, short-"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelResize4ToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelResize4"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelResize4", panelResize4())

	
# ######################################################################################################################
class panelSideLeft():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelSideLeft.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelSideLeftMenuText", "panel, side, left"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelSideLeftToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelSideLeft"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelSideLeft", panelSideLeft())

	
# ######################################################################################################################
class panelSideLeftUP():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelSideLeftUP.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelSideLeftUPMenuText", "panel, side, left, up"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelSideLeftUPToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelSideLeftUP"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelSideLeftUP", panelSideLeftUP())

	
# ######################################################################################################################
class panelSideRight():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelSideRight.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelSideRightMenuText", "panel, side, right"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelSideRightToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelSideRight"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelSideRight", panelSideRight())

	
# ######################################################################################################################
class panelSideRightUP():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelSideRightUP.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelSideRightUPMenuText", "panel, side, right, up"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelSideRightUPToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelSideRightUP"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelSideRightUP", panelSideRightUP())

	
# ######################################################################################################################
class panelBackOut():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBackOut.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBackOutMenuText", "panel, back, out"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBackOutToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBackOut"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBackOut", panelBackOut())

	
# ######################################################################################################################
class panelCoverXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelCoverXY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelCoverXYMenuText", "panel, top, cover"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelCoverXYToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelCoverXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelCoverXY", panelCoverXY())

	
# ######################################################################################################################
class panel2pad():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panel2pad.png"),
				"MenuText": QT_TRANSLATE_NOOP("panel2padMenuText", "replace, cube to pad"),
				"ToolTip" : QT_TRANSLATE_NOOP("panel2padToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panel2pad"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panel2pad", panel2pad())

	
# ######################################################################################################################
class panel2profile():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panel2profile.png"),
				"MenuText": QT_TRANSLATE_NOOP("panel2profileMenuText", "replace, cubes to construction profiles"),
				"ToolTip" : QT_TRANSLATE_NOOP("panel2profileToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panel2profile"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panel2profile", panel2profile())

	
# ######################################################################################################################
class panel2frame():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panel2frame.png"),
				"MenuText": QT_TRANSLATE_NOOP("panel2frameMenuText", "replace, cubes to frames"),
				"ToolTip" : QT_TRANSLATE_NOOP("panel2frameToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panel2frame"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panel2frame", panel2frame())

	
# ######################################################################################################################
class panel2link():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panel2link.png"),
				"MenuText": QT_TRANSLATE_NOOP("panel2linkMenuText", "replace, cubes to links"),
				"ToolTip" : QT_TRANSLATE_NOOP("panel2linkToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panel2link"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panel2link", panel2link())

	
# ######################################################################################################################
class panelFaceXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceXY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelFaceXYMenuText", "copy panel, face, XY"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelFaceXYToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceXY", panelFaceXY())

	
# ######################################################################################################################
class panelFaceYX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceYX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelFaceYXMenuText", "copy panel, face, YX"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelFaceYXToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceYX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceYX", panelFaceYX())

	
# ######################################################################################################################
class panelFaceXZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceXZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelFaceXZMenuText", "copy panel, face, XZ"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelFaceXZToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceXZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceXZ", panelFaceXZ())

	
# ######################################################################################################################
class panelFaceZX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceZX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelFaceZXMenuText", "copy panel, face, ZX"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelFaceZXToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceZX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceZX", panelFaceZX())

	
# ######################################################################################################################
class panelFaceYZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceYZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelFaceYZMenuText", "copy panel, face, YZ"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelFaceYZToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceYZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceYZ", panelFaceYZ())

	
# ######################################################################################################################
class panelFaceZY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelFaceZY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelFaceZYMenuText", "copy panel, face, ZY"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelFaceZYToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelFaceZY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelFaceZY", panelFaceZY())

	
# ######################################################################################################################
class panelBetweenXY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenXY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBetweenXYMenuText", "panel, between, XY"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBetweenXYToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenXY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenXY", panelBetweenXY())

	
# ######################################################################################################################
class panelBetweenYX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenYX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBetweenYXMenuText", "panel, between, YX"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBetweenYXToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenYX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenYX", panelBetweenYX())

	
# ######################################################################################################################
class panelBetweenXZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenXZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBetweenXZMenuText", "panel, between, XZ"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBetweenXZToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenXZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenXZ", panelBetweenXZ())

	
# ######################################################################################################################
class panelBetweenZX():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenZX.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBetweenZXMenuText", "panel, between, ZX"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBetweenZXToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenZX"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenZX", panelBetweenZX())

	
# ######################################################################################################################
class panelBetweenYZ():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenYZ.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBetweenYZMenuText", "panel, between, YZ"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBetweenYZToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenYZ"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenYZ", panelBetweenYZ())

	
# ######################################################################################################################
class panelBetweenZY():

	def GetResources(self):
		return {"Pixmap"  : os.path.join(iconPath, "panelBetweenZY.png"),
				"MenuText": QT_TRANSLATE_NOOP("panelBetweenZYMenuText", "panel, between, ZY"),
				"ToolTip" : QT_TRANSLATE_NOOP("panelBetweenZYToolTip", "Click to see info."),
				"Accel"   : "" }

	def Activated(self):

		import os, sys
		import fakemodule

		modulePath = sys.path
		
		module = "panelBetweenZY"
		
		path = os.path.dirname(fakemodule.__file__)
		path = os.path.join(path, "Tools")
		path = os.path.join(path, "MagicPanels")
		sys.path.append(path)

		if module in sys.modules:
			del sys.modules[module]

		__import__(module, globals(), locals(), [], 0)
		
		sys.path = modulePath

		return

	def IsActive(self):
		# not needed now, maybe in the future
		return True

FreeCADGui.addCommand("panelBetweenZY", panelBetweenZY())

	